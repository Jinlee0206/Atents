1. 입출력 예

numbers		target	return
[1, 1, 1, 1, 1]	3	5
[4, 1, 2, 1]	4	2
-----------------------------------------------------------------------------------------------
2.수도코드

public class Solution {
    public int solution(int[] numbers, int target) {
        return Dfs(numbers, target, 0, 0);
    }
    
    static int Dfs(int[] arr, int target, int 배열의 인덱스, int 현재까지 계산한 값)
    {
	// 현재까지 계산한 num이 target과 같은지 확인하여 결과를 반환
        if (인덱스의 크기가 배열의 크기랑 같다면)
        {
            if (현재까지 계산한 값이 target과 같다면) return 1;
            else return 0;
        }
        else
            return Dfs(I배열의 인덱스의 원소를 더한 값) + Dfs(배열의 인덱스의 원소를 뺀 값);
    }

}

(재귀함수)
numbers = [1, 1, 1, 1, 1] , target = 3
Dfs([1, 1, 1, 1, 1], 3, 0, 0)

Dfs([1, 1, 1, 1, 1], 3, 1, 1) + Dfs([1, 1, 1, 1, 1], 3, 1, -1)

Dfs([1, 1, 1, 1, 1], 3, 2, 2) + Dfs([1, 1, 1, 1, 1], 3, 2, 0) + Dfs([1, 1, 1, 1, 1], 3, 1, 0) + Dfs([1, 1, 1, 1, 1], 3, 1, -2)

-----------------------------------------------------------------------------------------------
3. 알고리즘

깊이/너비 우선 탐색(DFS/BFS)
-----------------------------------------------------------------------------------------------
4.문제설명

n개의 음이 아닌 정수들이 있습니다. 
이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 
예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

사용할 수 있는 숫자가 담긴 배열 numbers, 
타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를
 return 하도록 solution 함수를 작성해주세요


제한사항 
- 주어지는 숫자의 개수는 2개 이상 20개 이하입니다.
- 각 숫자는 1 이상 50 이하인 자연수입니다.
- 타겟 넘버는 1 이상 1000 이하인 자연수입니다.
-----------------------------------------------------------------------------------------------

5. 문제 링크 
https://school.programmers.co.kr/learn/courses/30/lessons/43165

==========================================================================================================

    public class Solution
    {
        public int solution(int[] numbers, int target)
        {
           return Dfs(numbers, target,0,0);
        }

        static int Dfs(int[] arr, int target, int arrIndex, int Count)
        {
            if (arrIndex == arr.Length) 
            {
                if(Count == target)  return 1;
                else  return 0;
            }
            else  return Dfs(arr,target,arrIndex+1,Count+arr[arrIndex]) + Dfs(arr,target,arrIndex+1,Count-arr[arrIndex]);
        }

    }
