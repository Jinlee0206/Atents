1. 입출력 예제 및 반환 양식
int solution (int[] numbers){ int[] answer; return answer;}

numbers	            result
[2, 3, 3, 5]	      [3, 5, 5, -1]
[9, 1, 5, 3, 6, 2]	[-1, 5, 6, 6, -1, -1]



2. 수도 코드
using System;
using System.Linq; //Enumerable.Repeat : 특정 숫자를 특정 횟수만큼 반복한 집합을 만들 때 사용
using System.Collections.Generic; //스택 사용

public class Solution {
    public int[] solution(int[] numbers) {

        //answers은 정답에 대한 배열로 문제 조건에 해당이 되지 않은 경우 -1 대입
        //문제 조건에 해당되는 경우만 구할 것이기 때문에 미리 -1로 초기화
        Enumerable.Repeat을 이용하여 배열 numbers의 크기 만큼의 answer 배열을 생성과 동시에 배열 전체의 값을 '-1'로 초기화

        index로 사용할 스택 생성 //이중 for문으로 답을 구할 수 있으나 시간 초과로 스택을 사용
            
        for(i는 0부터 numbers의 길이; i++)
        {
            while(스택에 포함된 요소 수가 0보다 클 때)
            {
                //자신보다 뒤에 있는 숫자중에서 자신보다 크면서 가장 가까이 있는 수를 찾는 과정
                if(스택.peek 번째의 numbers가 i 번째의 numbers 값보다 작을 경우)
                {
                    스택.Peek() 번째의 answer에 i 번째의 numbers 대입                    
                    스택에서 가장 위에 있는 항목 제거 //조건을 달성하였으므로 해당 index는 제거
                } else break;
            }
            i를 스택의 가장 윗 부분에 추가 //while 안에 if 조건에 해당이 안 될 경우 index가 누적되는 형식
        }
        리턴 answer
    }
}




3. 문제풀이에 필요한 알고리즘 : 스택(Stack)

스택(Stack)의 개념
한 쪽 끝에서만 자료를 넣고 뺄 수 있는 LIFO(Last In First Out) 형식의 자료 구조


스택(Stack)스택의 연산
스택(Stack)는 LIFO(Last In First Out) 를 따른다. 즉, 가장 최근에 스택에 추가한 항목이 가장 먼저 제거될 항목이다.


pop(): 스택에서 가장 위에 있는 항목을 제거한다.
push(item): item 하나를 스택의 가장 윗 부분에 추가한다.
peek(): 스택의 가장 위에 있는 항목을 반환한다.
isEmpty(): 스택이 비어 있을 때에 true를 반환한다.
스택(Stack)의 구현
문제의 종류에 따라 배열보다 스택에 데이터를 저장하는 것이 더 적합한 방법일 수 있다.

배열과 달리 스택은 상수 시간에 i번째 항목에 접근할 수 없다.
하지만 스택에서 데이터를 추가하거나 삭제하는 연산은 상수 시간에 가능하다.
배열처럼 원소들을 하나씩 옆으로 밀어 줄 필요가 없다.
스택(Stack)은 연결리스트 로 구현할 수 있다. 연결리스트의 같은 방향에서 아이템을 추가하고 삭제하도록 구현한다.



4. 문제링크 : https://school.programmers.co.kr/learn/courses/30/lessons/154539
==========================================================================

using System;
using System.Linq; 
using System.Collections.Generic; 

public class Solution {
    public int[] solution(int[] numbers) {
        
        int[] answer = Enumerable.Repeat(-1, numbers.Length).ToArray();
        Stack<int> stack = new Stack<int>();
        
        for(int i = 0; i < numbers.Length; i++) {
            while(stack.Count > 0) {
                
                if(numbers[stack.Peek()] < numbers[i]) {
                    answer[stack.Peek()] = numbers[i];
                    stack.Pop(); 
                } else {
                    break;
                }
            }
            stack.Push(i); 
        }
        
        return answer;
    }
}