LV2. 피로도

------------------- 문제 설명 ----------------------

XX게임에는 피로도 시스템(0 이상의 정수로 표현합니다)이 있으며, 일정 피로도를 사용해서 던전을 탐험할 수 있습니다. 
이때, 각 던전마다 탐험을 시작하기 위해 필요한 "최소 필요 피로도"와 던전 탐험을 마쳤을 때 소모되는 "소모 피로도"가 있습니다. 
"최소 필요 피로도"는 해당 던전을 탐험하기 위해 가지고 있어야 하는 최소한의 피로도를 나타내며, "소모 피로도"는 던전을 탐험한 후 소모되는 피로도를 나타냅니다. 
예를 들어 "최소 필요 피로도"가 80, "소모 피로도"가 20인 던전을 탐험하기 위해서는 유저의 현재 남은 피로도는 80 이상 이어야 하며, 던전을 탐험한 후에는 피로도 20이 소모됩니다.

이 게임에는 하루에 한 번씩 탐험할 수 있는 던전이 여러개 있는데, 한 유저가 오늘 이 던전들을 최대한 많이 탐험하려 합니다. 
유저의 현재 피로도 k와 각 던전별 "최소 필요 피로도", "소모 피로도"가 담긴 2차원 배열 dungeons 가 매개변수로 주어질 때, 유저가 탐험할수 있는 최대 던전 수를 return 하도록 solution 함수를 완성해주세요.

제한사항
k는 1 이상 5,000 이하인 자연수입니다.
dungeons의 세로(행) 길이(즉, 던전의 개수)는 1 이상 8 이하입니다.
dungeons의 가로(열) 길이는 2 입니다.
dungeons의 각 행은 각 던전의 ["최소 필요 피로도", "소모 피로도"] 입니다.
"최소 필요 피로도"는 항상 "소모 피로도"보다 크거나 같습니다.
"최소 필요 피로도"와 "소모 피로도"는 1 이상 1,000 이하인 자연수입니다.
서로 다른 던전의 ["최소 필요 피로도", "소모 피로도"]가 서로 같을 수 있습니다.
입출력 예
k	dungeons					result
80	[[80,20],[50,40],[30,10]]	3

------------------- 수도 코드 ---------------------

#include <bits/stdc++.h> // 많이 사용하는 표준 라이브러리 헤더들을 모두 한번에 컴파일 될 수 있도록 선언

using namespace std;

정답을 리턴할 int형 값 선언
방문처리를 위한 int형 고정 배열 선언, 크기는 9이상

int형 피로도, int형 던전 층수, 이차원 벡터 던전을 매개변수로 가지는 void dfs 함수 선언
{
	최고 층수를 갱신하면 정답에 현재 던전 층수를 저장
    
    i -> 던전의 전체 층수(이차원 벡터 던전의 행) 만큼 반복
    {
        해당 던전을 방문한 적이 없고, 피로도가 던전의 "최소 필요" 피로도보다 크거나 같을 때
        {
            해당 던전 방문 처리
            void dfs 재귀 호출 / 피로도 -= 소모피로도, 던전 층수 + 1, 이차원 벡터 던전
            해당 던전 방문 처리 해제
        }
    }
    리턴
}

int solution(int k, vector<vector<int>> dungeons) {
    dfs (시작 피로도, 시작 던전 층수, 이차원 벡터 던전)   
    정답 리턴
}


------------------- 알고리즘 ---------------------

DFS를 활용한 완전탐색

이미지 : [그래프](https://user-images.githubusercontent.com/105345909/230716079-b2e42ee5-143e-438d-a950-cd8dc1db39c8.png)

------------------- 문제 링크---------------------
링크 : https://school.programmers.co.kr/learn/courses/30/lessons/87946?language=cpp
